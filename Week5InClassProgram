// IMPORTS
// These are some classes that may be useful for completing the project.
// You may have to add others.
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Hyperlink;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebEvent;
import javafx.scene.web.WebView;
import javafx.scene.web.WebHistory;
import javafx.scene.web.WebHistory.Entry;
import javafx.stage.Stage;
import javafx.concurrent.Worker.State;
import javafx.concurrent.Worker;
import javafx.scene.layout.HBox;
import javafx.scene.text.Text;

/**
 * Parker Kirwin, Logan Gyolai, Lena Ball, Ethan Ankley.
 * Last Edit on 2/17/20 by Lena
 * The main class for Week5InClassProgram. Week5InClassProgram constructs the JavaFX window and
 * handles interactions with the dynamic components contained therein.
 *
 *
 * The title bar, HTML view, and status bar are fully functioning. The forward, backwards, and help buttons need to be
 * set to handle their tasks and the address bar needs to be able to go to the entered link when enter is pressed.
 */
public class Week5InClassProgram extends Application {
	// INSTANCE VARIABLES
	// These variables are included to get you started.
	private Stage stage = null;
	private BorderPane borderPane = null;
    private WebView view = null;
	private WebEngine webEngine = null;
	private TextField statusBar = null;
	private TextField toolbar = null;
	private TextField addressBar = null;

	// HELPER METHODS
	/**
	 * Retrieves the value of a command line argument specified by the index.
	 *
	 * @param index - position of the argument in the args list.
	 * @return The value of the command line argument.
	 */
	private String getParameter( int index ) {
		Parameters params = getParameters();
		List<String> parameters = params.getRaw();
		return !parameters.isEmpty() ? parameters.get(index) : "";
	}

	/**
	 * Creates a WebView which handles mouse and some keyboard events, and
	 * manages scrolling automatically, so there's no need to put it into a ScrollPane.
	 * The associated WebEngine is created automatically at construction time.
	 *
	 * @return browser - a WebView container for the WebEngine.
	 */
	private WebView makeHtmlView( ) {
		view = new WebView();
		webEngine = view.getEngine();
		return view;
	}

	/**
	 * Generates the status bar layout and text field.
	 *
	 * @return statusbarPane - the HBox layout that contains the statusbar.
	 */
	private HBox makeStatusBar( ) {
		HBox statusbarPane = new HBox();
		statusbarPane.setPadding(new Insets(5, 4, 5, 4));
		statusbarPane.setSpacing(10);
		statusbarPane.setStyle("-fx-background-color: #666666;");
		statusBar = new TextField();
		HBox.setHgrow(statusBar, Priority.ALWAYS);
		statusbarPane.getChildren().addAll(statusBar);
		return statusbarPane;
	}

	private HBox makeToolBar()
	{
		HBox toolbarPane = new HBox();
		toolbarPane.setPadding(new Insets(5,4,5,4));
		toolbarPane.setSpacing(10);
		toolbarPane.setStyle("-fx-background-color:#666666;");

		Button backButton = new Button("<-");
		backButton.setOnAction(event ->
				{
				webEngine.executeScript("history.back()");
				});
		Button forwardButton = new Button("->");
		forwardButton.setOnAction(event ->
		{
			webEngine.executeScript("history.forward()");
		});
		Button helpButton = new Button("?");
		helpButton.setOnAction(event ->
		{
			Stage stagePopUp = new Stage();
			Text t = new Text();
			t.setText("Browser Help\n\nThis is a basic web browser created with JavaFX made by Parker Kirwin, Logan Gyolai, Lena Ball, and Ethan Ankley." +
					"\n\nCourse Name: CS 1122\nLab Section 4\n\n\n" +
					"Instructions:\n(->) Forward Button:  Jumps to the next page if one exists.\n(<-) Back Button:  Jumps to previous page if one exists.\n(?) Help Button:  Displays help, and program details.");
			t.setLayoutX(20);
			t.setLayoutY(20);

			Group group = new Group(t);
			Scene sceneH = new Scene(group, 800, 450);
			stagePopUp.setTitle("Browser Help");
			stagePopUp.setScene(sceneH);
			stagePopUp.show();
		});

		addressBar = new TextField();
		addressBar.setOnAction(event -> {
			String address = addressBar.getText();
			if (!address.contains("http://"))
			{
				if (!address.contains("www."))
				{
					address="www."+address;
				}
				address="http://"+address;
			}
			webEngine.load(address);
		});
		toolbarPane.setHgrow(addressBar,Priority.ALWAYS);

		toolbarPane.getChildren().addAll(backButton,forwardButton,addressBar,helpButton);
		return toolbarPane;
	}

	// REQUIRED METHODS
	/**
	 * The main entry point for all JavaFX applications. The start method is
	 * called after the init method has returned, and after the system is ready
	 * for the application to begin running.
	 *
	 * NOTE: This method is called on the JavaFX Application Thread.
	 *
	 * primaryStage - the primary stage for this application, onto which
	 * the application scene can be set.
	 */
	@Override
	public void start(Stage stage)
	{
		// Build your window here.

		//Copied in class
		borderPane=new BorderPane();
		Scene scene = new Scene(borderPane, 800,600);

		borderPane.setCenter(makeHtmlView());
		String defaultUrl=("http://www.republiquedesmangues.fr/");
		String commandLineUrl = getParameter(0);
		webEngine.load(commandLineUrl.isEmpty()?defaultUrl:commandLineUrl);

		borderPane.setBottom(makeStatusBar());
		statusBar.setText("This is the statusbar.");

		borderPane.setTop(makeToolBar());

		webEngine.setOnStatusChanged(e->{statusBar.setText(e.getData());} );

		webEngine.getLoadWorker().stateProperty().addListener
				(new ChangeListener<State>()
					{
						@Override
						public void changed (ObservableValue<? extends State> observable,
											 State oldValue,State newValue)
						{
							if (newValue==State.SUCCEEDED)
							{
								stage.setTitle(webEngine.getTitle());
								addressBar.setText((webEngine.getLocation()));
							}
						}
					}
				);
		stage.setScene(scene);
		stage.setTitle(webEngine.getTitle());
		stage.show();
	}


	/**
	 * The main( ) method is ignored in JavaFX applications.
	 * main( ) serves only as fallback in case the application is launched
	 * as a regular Java application, e.g., in IDEs with limited FX
	 * support.
	 *
	 * @param args the command line arguments
	 */
	public static void main(String[] args) {
		launch(args);
	}
}
